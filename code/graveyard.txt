from webServer:
HTTP_RESPONSE = """\
HTTP/1.1 200 OK

<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>

<h1>My First Heading</h1>
<p>My first paragraph.</p>

</body>
</html>
"""

HTTP_WITH_CSS_RESPONSE = """\
HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Example Page</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Hello, world!</h1>
    <p>This is an example webpage.</p>
</body>
</html>"""

HTTP_WITH_CSS_RESPONSE2 = """\
HTTP/1.1 200 OK
Content-Type: text/css

body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

h1 {
    color: green;
}
"""

from proxyServer:
"""

def interrupt():
    while True:
        seconds = input()
        if checkInterrupt:
            seconds = seconds[1:]
            print(f"Sleeping... {seconds}sec")
            time.sleep(int(seconds))
            print("finished")


def checkInterrupt(inpt: str) -> bool:
    checkForTime = re.match("^s\d+$", inpt)
    return bool(checkForTime)
"""

def handleClient(proxySocket: socket.socket, serverList: list[Server]):
    clientSocket, clientAddress = proxySocket.accept()
    newClient = Client(*clientAddress, clientSocket)

    notFoundServer = True
    while notFoundServer:
        currentServer = chooseServer(serverList)
        if currentServer.connectToServer():
            notFoundServer = False
        else:
            serverList.remove(currentServer)

    req = newClient.reciveRequest()
    rsp = currentServer.handleRequest(req)
    newClient.sendResponse(rsp)
    newClient.closeConnection()

    currentServer.closeConnection()


def chooseServer(serverList: list[Server]) -> Server:
    server:Server = serverList[random.randint(0,len(serverList)-1)]

    if server.runThread:
        return server
    serverList.remove(server)
    if not serverList:
        logger.warning("*** ALL SERVERS ARE DOWN, PLEASE CHOOSE NEW SERVERS ***")
        serverList.extend(initServers())
    chooseServer(serverList)


def sendMessage(dSock: socket.socket, request: bytes):
    dSock.sendall(request)


def reciveData(sock: socket.socket) -> bytes:
    answer = b''
    while True:
        chunk = sock.recv(BUFFER_SIZE)
        if not chunk:
            break
        answer += chunk
    return answer

newPage/index.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Page 1</title>
</head>
<body>
    <h1>This is Page 1</h1>
    <p>Welcome to Page 1.</p>
    <p><a href="page2.html">Go to Page 2</a></p>
</body>
</html>


webServer2.py
import socket

S_HOST = '127.0.0.1'
S_PORT = 33333
BUFFER_SIZE = 1024
BACKLOG = 10

HTTP_RESPONSE = """\
HTTP/1.1 200 OK

<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>

<h1>My First Heading</h1>
<p>My first paragraph.</p>
</body>
</html>
"""


def initServer():
    serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serverSocket.bind((S_HOST, S_PORT))
    print("Server is up and running!")

    return serverSocket


def handleRequest(clientSocket):
    try:
        request = clientSocket.recv(BUFFER_SIZE).decode()
    except ConnectionResetError:
        clientSocket.close()
        return
    
    print("Request:")
    print(request.split("\r\n"))

    response = HTTP_RESPONSE
    clientSocket.sendall(response.encode())
    clientSocket.close()


def runServer():
    serverSocket = initServer()
    serverSocket.listen(BACKLOG)
    print(f"Server listening on port {S_PORT}...")

    while True:
        clientSocket, clientAddress = serverSocket.accept()
        handleRequest(clientSocket)


def main():
    runServer()


if __name__ == "__main__":
    main()

